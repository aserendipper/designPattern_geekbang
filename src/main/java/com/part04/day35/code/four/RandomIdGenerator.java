package com.part04.day35.code.four;

import com.part04.day35.code.one.LogTraceIdGenerator;
import com.part04.day35.code.two.VisibleForTesting;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.util.Random;

/**
 * Id Generator that is used to generate random id.
 * 
 * <p>
 *     The IDs generated by this class are not guaranteed to be unique,
 *     but the probability of generating duplicate IDs is very low.
 * </p>
 */
public class RandomIdGenerator implements LogTraceIdGenerator {
    private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);

    /**
     * Generate the random id. The IDs may be duplicated only in extreme cases.
     * 
     * @return the random id
     */
    @Override
    public String generate() {
        String substrOfHostName = getLastFieldOfHostName();
        long currentTimeMillis = System.currentTimeMillis();
        String randomString = generateRandomAlphameric(8);
        String id = String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
        return id;
    }

    /**
     * Get the local hostname and
     * extract the last field of the name string splitted by delimiter '.'
     * 
     * @return extract the last field of hostname. Return null if failed to get the hostname.
     */
    private String getLastFieldOfHostName() {
        String substrOfHostName = null;
        try {
            String hostName = InetAddress.getLocalHost().getHostName();
            substrOfHostName = getLastSubstrSplittedByDot(hostName);
            return substrOfHostName;
        } catch (Exception e) {
            logger.warn("Failed to get the host name." + e);
        }
        return substrOfHostName;
    }

    /**
     * Get the last substring splitted by delimiter '.'
     * 
     * @param hostName should not be null
     * @return the last field of host name
     */
    @VisibleForTesting
    public String getLastSubstrSplittedByDot(String hostName) {
        String[] tokens = hostName.split("\\.");
        String substrOfHostName = tokens[tokens.length - 1];
        return substrOfHostName;
    }

    /**
     * Generate random string which 
     * only contains digits, uppercase and lowercase letters.
     * 
     * @param length should not be less than 0
     * @return the random string. Return empty string if length is less than 0.
     */
    @VisibleForTesting
    public String generateRandomAlphameric(int length) {
        char[] randomChars = new char[length];
        int count = 0;
        Random random = new Random();
        while (count < length) {
            int maxAscii = 'z';
            int randomAscii = random.nextInt(maxAscii);
            boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
            boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
            boolean isLowercase = randomAscii >= 'a' && randomAscii <= 'z';
            if (isDigit || isUppercase || isLowercase) {
                randomChars[count] = (char)randomAscii;
                count++;
            }
        }
        return new String(randomChars);
    }
}
